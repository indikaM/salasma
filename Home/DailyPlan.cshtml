@{
     Layout = "~/Shared/Layouts/_MainLayout.cshtml";
     Page.Title = "Daily Plan";  
     Service dbService = new Service();

     List<Project> projectList = dbService.GetProjectList();
     var projectTypes = new List<SelectListItem>();
     foreach(var project in projectList){
         projectTypes.Add(new SelectListItem { Value =  project.ProjectID.ToString(), Text = project.ProjectName });
     }
   
     List<Task> currentDayTasks = dbService.GetTodaysTasks();   


}

<script>
        var today = '@DateTime.Now.ToString("yyyy-MM-dd")';
        var tomorrw = '@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")';
        var dayafter = '@DateTime.Now.AddDays(2).ToString("yyyy-MM-dd")';
        var taskURL = "/API/TaskService.cshtml";
        var todayDateString = '@DateTime.Now.ToString("ddd, MMMM dd, yyyy")';
        var tomorrowDateString = '@DateTime.Now.AddDays(1).ToString("ddd, MMMM dd, yyyy")';
        var dayAfterDateString = '@DateTime.Now.AddDays(2).ToString("ddd, MMMM dd, yyyy")';
        var JSONArray = new Array();  //Created as a global Array to hold the newly created Tasks
        var taskObject = null;


</script>

<script>

    $(function () {
        //taskObject = null;
        //JSONArray = new Array();
        $("#addtask").css("border", "1px solid #000000");
        $("#addtask").css("border-radius", "8px");
        $("#addtask").focus();


        $("#Add").on('click', function () {
            AddTask();
        });

        $("#addtask").on("click", function () {
            var $this = $(this);
            $this.val("");
        });

        $("input[text].textArea").on("click", function (e) {
            $(this).css("border", "1px solid #000000");
        });

        $(".textArea").on("focusout", function () {
            var $this = $(this);
            $this.css("border", "0px");
        });

        $("#Today").on("click", function () {
            setSelectedDate(todayDateString);
        });

        $("#Tomorrow").on("click", function () {
            setSelectedDate(tomorrowDateString);
        });

        $("#DayAfter").on("click", function () {
            setSelectedDate(dayAfterDateString);
        });

        $(".datepicker1").datepicker({
            altField: "#pickedDate",
            altFormat: "yy-mm-dd",
            dateFormat: "M d,y",
            onSelect: function (dateText) {
                setSelectedDate($("#pickedDate").val());
                showHideDateicker(false);
            }
        });

        $("#Gratitude").on("click", function () {
            try {
                var pickedDate = $("#pickedDate");
                alert(pickedDate.val());
            } catch (err) {
                alert(err);
            }
        });

        $("#Daily,#Weekly , #Monthly").on("click", function () {
            getTasks("Daily");
            showHideDateicker(true);
            showEditPane(false);
        });

        $("#Today, #Tomorrow , #DayAfter").on("click", function () {
            $this = $(this);
            try {
                getTasks($this.attr('id'))
                showEditPane(false);

            } catch (err) {
                alert(err);
            }

        });


        function showHideDateicker(show) {
            var $this = $(".datepicker1");
            if (show) {
                $this.show();
            } else {
                $this.hide();
            }
        }
        function setSelectedDate(val) {


            var dateText = $("#newlyPickedDate");
            $("#pickedDate").val($.datepicker.formatDate('yy-mm-dd', new Date(val)));
            dateText.html($.datepicker.formatDate('D, MM d , yy', new Date(val)));
            getTasks("Daily");
        }
        function getTasks(selDate) {
            var dateToGet = $("#pickedDate").val();
            var data = null;
            console.log(taskURL + "?method=get" + selDate + "Tasks&date=" + dateToGet + "")

            $.ajax({
                type: "GET",
                url: taskURL + "?method=get" + selDate + "Tasks&date=" + dateToGet + "",
                dataType: 'json',
                cache: false,
                success: function (data, textStatus, xhr) {
                    //JSONArray - Need to clear here;
                    JSONArray.length = 0;
                    JSONArray = $.merge(data, JSONArray);
                    updateTasksList(data);
                },
                error: function (data, textStatus, errorThrown) {
                    console.log(textStatus)
                }
            });
        }

        $('.PlannedDate').datepicker({
            dateFormat: "M d,y"
        });


    });

</script>

<script>

</script>
<!-- Update Daily Table -->
<script>

    function isFirstRowExist(tRow) {
        try {
            if (tRow.find('[name="taskName_0"]').attr('name') == "taskName_0") {
                console.log(tRow.find('[name="taskName_0"]').attr('name'));
                return true;
            }
        } catch (err) {
            alert(err);
            return false;
        }
        return false;
    }

    //Creating a new row to add as the default row is not available
    function createFirstRow() {

        newRow = $('<tr></tr>', {
            class: 'dailyTaskRow',
            id: 'dailyTaskRow_0'
        });
        taskName = $('<input/>', {
            type: 'text',
            id: 'taskName_0',
            class: 'textArea',
            size: '50',
            name: 'taskName_0'
        });
        taskName.attr("size", '50');

        td0 = $('<td></td>');
        taskName.appendTo(td0);
        td0.appendTo(newRow)

        Reason = $('<Hidden/>', {
            type: 'Hidden',
            id: 'Reason_0',
            class: 'textArea',
            rows: '4',
            cols: '30',
            name: 'Reason_0'
        });
        td1 = $('<td></td>');
        Reason.appendTo(td0);
        //td1.appendTo(newRow)

        Duration = $('<input/>', {
            type: 'text',
            id: 'Duration_0',
            class: 'textArea',
            size: '2',
            name: 'Duration_0'
        });
        Duration.attr("size", '2');
        td2 = $('<td></td>');
        Duration.appendTo(td2);
        td2.appendTo(newRow)

        PlannedDate = $('<input/>', {
            type: 'text',
            id: 'PlannedDate_0',
            class: 'textArea PlannedDate',
            size: '12',
            name: 'PlannedDate_0',
            readonly: 'true'
        });
        PlannedDate.attr("size", '12');
        td3 = $('<td></td>');
        PlannedDate.appendTo(td3);
        td3.appendTo(newRow)

        Leverage = $('<Hidden/>', {
            type: 'Hidden',
            id: 'Leverage_0',
            class: 'textArea',
            rows: '1',
            cols: '20',
            name: 'Leverage_0'
        });
        td4 = $('<td></td>');
        Leverage.appendTo(td3);
        //td4.appendTo(newRow)


        Priority = $('<input/>', {
            type: 'text',
            id: 'Priority_0',
            class: 'textArea',
            size: '2',
            name: 'Priority_0'
        });
        Priority.attr("size", '2');
        td5 = $('<td></td>');
        Priority.appendTo(td5);
        td5.appendTo(newRow);

        td6 = $("<td><a id=\"taskEdit_0\" href=\"javascript:editTask('#taskEdit_0')\" data-index=\"0\" ><img alt='Edit' src='/Icons/pencil.png' width='20px' height='20px'></a>|<a id=\"taskUpdate_0\" href=\"javascript:updateTask('#taskUpdate_0')\" data-index=\"0\" ><img alt='Update' src='/Icons/cnr_update.png' width='20px' height='20px'></a>|<a href=\"javascript:removeTask('#taskRemove_0')\" id=\"taskRemove_0\" data-index=\"0\"><img alt='Delete' src='/Icons/button_delete_green.png' width='20px' height='20px'></a></td>");
        td6.appendTo(newRow);


        console.log("createFirstRow -" + newRow.find('[name="taskName_0"]').attr('name'));
        return newRow;
    }

    function addNewTaskToGrid(JSONdata) {
        var incr = JSONArray.length - 1;

        var table = $(".widgetTable");
        var tBody = $("#dailyTaskTableBody");
        var tRow = $("#dailyTaskRow_0");
        var newRow = tRow.clone(true);

        createTableRows(newRow, incr, $.parseJSON(JSON.stringify(JSONArray[incr])), incr).appendTo(tBody);
    }

    function removeTaskFromGrid(index) {
        tRow = $("#dailyTaskRow_" + index);
        tRow.hide();
    }

    function updateTasksList(JSONdata) {
        console.log("updateTasksList -" + JSON.stringify(JSONdata));
        var tRow = $("#dailyTaskRow_0");
        var tBody = $("#dailyTaskTableBody");
        var tHead = $("#dailyTaskTableHead");
        var table = $(".widgetTable");

        var newTBody;
        try {
            var incr = 0;
            table.empty();
            newTBody = $('<tbody></tbody>', {
                class: 'dailyTaskTableBody'
            });
            if (!isFirstRowExist(tRow))
                tRow = createFirstRow()


            var newRow = tRow.clone(true);
            $.each(JSONdata, function (index, item) {
                _tempRow = createTableRows(newRow, index, item, incr)
                _tempRow.appendTo(newTBody);
                incr += 1;
            });
            tHead.appendTo(table);
            newTBody.appendTo(table);
        } catch (err) {
            alert(err);
        }
    }

    function createTableRows(newRow, index, item, incr) {
        var _tempRow = newRow.clone();
        _tempRow.attr("id", "dailyTaskRow_" + incr);
        try { _tempRow = updateRowData(_tempRow, item, incr); } catch (e) { console.log(e); }

        /*_tempRow.find('[name="taskName_0"]').val(item.Name).attr("id", "taskName_" + incr).attr("name", "taskName_" + incr);
        _tempRow.find('[name="Reason_0"]').val(item.Reason).attr("id", "Reason_" + incr).attr("name", "Reason_" + incr);
        _tempRow.find('[name="Duration_0"]').val(item.DurationDisplay).attr("id", "Duration_" + incr).attr("name", "Duration_" + incr);
        _tempRow.find('[name="PlannedDate_0"]').val($.datepicker.formatDate('M dd, y', new Date(parseInt(plannedDate.substr(6))))).attr("id", "PlannedDate_" + incr).attr("name", "PlannedDate_" + incr);
        _tempRow.find('[name="PlannedDate_' + incr + '"]').removeClass('hasDatepicker').datepicker();
        _tempRow.find('[name="Leverage_0"]').val(item.Leverage).attr("id", "Leverage_" + incr).attr("name", "Leverage_" + incr);
        _tempRow.find('[name="Priority_0"]').val(item.Priority).attr("id", "Priority_" + incr).attr("name", "Priority_" + incr);
        _tempRow.find('[id="taskEdit_0"]').attr("id", "taskEdit_" + incr).attr("href", "javascript:editTask('#taskEdit_" + incr + "')").attr("data-index", incr);
        _tempRow.find('[id="taskUpdate_0"]').attr("id", "taskUpdate_" + incr).attr("href", "javascript:updateTask('#taskUpdate_" + incr + "')").attr("data-index", incr);
        _tempRow.find('[id="taskRemove_0"]').attr("id", "taskRemove_" + incr).attr("href", "javascript:removeTask('#taskRemove_" + incr + "')").attr("data-index", incr);*/
        return _tempRow;
    }

    function updateRowData(_tempRow, item, incr) {
        console.log(item);
        var plannedDate = (item.PlannedDate.indexOf("Date") > 0) ? item.PlannedDate : "\/Date(" + new Date(item.PlannedDate).valueOf() + ")\/";
        console.log(item.PlannedDate);
        _tempRow.find('[name="taskName_0"]').val(item.Name).attr("id", "taskName_" + incr).attr("name", "taskName_" + incr);
        _tempRow.find('[name="Reason_0"]').val(item.Reason).attr("id", "Reason_" + incr).attr("name", "Reason_" + incr);
        _tempRow.find('[name="Duration_0"]').val(item.DurationDisplay).attr("id", "Duration_" + incr).attr("name", "Duration_" + incr);
        _tempRow.find('[name="PlannedDate_0"]').val($.datepicker.formatDate('M dd, y', new Date(parseInt(plannedDate.substr(6))))).attr("id", "PlannedDate_" + incr).attr("name", "PlannedDate_" + incr);
        _tempRow.find('[name="PlannedDate_' + incr + '"]').removeClass('hasDatepicker').datepicker();
        _tempRow.find('[name="Leverage_0"]').val(item.Leverage).attr("id", "Leverage_" + incr).attr("name", "Leverage_" + incr);
        _tempRow.find('[name="Priority_0"]').val(item.Priority).attr("id", "Priority_" + incr).attr("name", "Priority_" + incr);
        _tempRow.find('[id="taskEdit_0"]').attr("id", "taskEdit_" + incr).attr("href", "javascript:editTask('#taskEdit_" + incr + "')").attr("data-index", incr);
        _tempRow.find('[id="taskUpdate_0"]').attr("id", "taskUpdate_" + incr).attr("href", "javascript:updateTask('#taskUpdate_" + incr + "')").attr("data-index", incr);
        _tempRow.find('[id="taskRemove_0"]').attr("id", "taskRemove_" + incr).attr("href", "javascript:removeTask('#taskRemove_" + incr + "')").attr("data-index", incr);
        return _tempRow;
    }
</script>
<!-- Adding a new Task -->
<script>

    function updateJSONTask(taskObject, task) {

        taskObject.Name = task.Name;
        taskObject.ID = task.ID;
        taskObject.ProjectID = task.ProjectID;
        taskObject.ProjectName = task.projectName;
        taskObject.PlannedDate = task.PlannedDate;
        taskObject.ScheduledTime = task.ScheduledTime;
        taskObject.Duration = task.Duration;
        taskObject.DurationMessure = task.DurationMessure;
        taskObject.DurationDisplay = task.DurationDisplay;
        taskObject.Leverage = task.Leverage;
        taskObject.Reason = task.Reason;
        taskObject.Priority = task.Priority;
        taskObject.PriorityID = task.PriorityID;
        taskObject.userID = task.userID;
        printTaskStack(taskObject);
        return taskObject;


    }

    function createJSONTask(taskName, ID, projectID, projectName, PlannedDate, ScheduledTime, Duration, DurationMessure, DurationDisplay, Leverage, Reason, Priority, PriorityID) {

        taskObject = new Object();
        taskObject.Name = taskName;
        taskObject.ID = ID;
        taskObject.ProjectID = projectID;
        taskObject.ProjectName = projectName;
        taskObject.PlannedDate = PlannedDate;
        taskObject.ScheduledTime = ScheduledTime;
        taskObject.Duration = Duration;
        taskObject.DurationMessure = DurationMessure;
        taskObject.DurationDisplay = DurationDisplay;
        taskObject.Leverage = Leverage;
        taskObject.Reason = Reason;
        taskObject.Priority = Priority;
        taskObject.PriorityID = PriorityID;
        taskObject.userID = "1";
        //printTaskStack(taskObject);
        return taskObject;


    }

    function createJSONArray(taskObject) {
        if (JSONArray.length == 0) {
            JSONArray = new Array();
        }
        JSONArray.push(taskObject);
        return (JSON.stringify(JSONArray));
    }

    function AddTask() {
        var taskName = $("#addtask").val();
        var projectID = $("#projectName").val();
        var projectName = $("#projectName option:selected").text();

        // var taskObject = createJSONTask(taskName, -1, projectID, projectName, "\/Date(" + new Date($("#pickedDate").val()).valueOf() + ")\/", '00:00-00:00', 0, 'h', '', '', '', '', '0');
        console.log('$("#pickedDate").val() - ' + $("#pickedDate").val());
        var taskObject = createJSONTask(taskName, -1, projectID, projectName,
            new Date($("#pickedDate").val()), '00:00-00:00', 0, 'h', '', '', '', '', '0');
        var JSONString = createJSONArray(taskObject);
        console.log(JSONString);
        if (updateTaskToServer(taskObject, "AddTask", JSONArray.length)) {
            addNewTaskToGrid($.parseJSON(JSONString));
        }

    }

    function editTask(Task) {
        console.log(JSON.stringify(JSONArray));
        index = $(Task).attr("data-index");
        console.log($(Task).attr("id"));
        console.log(index);
        console.log(JSONArray[$(Task).attr("data-index")].ID);
        taskToUpdate = JSONArray[index];
        showEditPane(true);
        taskToUpdate = JSONArray[index];
        printTaskStack(taskToUpdate);
        setEditPane(taskToUpdate, index);
    }

    function showEditPane(show) {
        var taskEditPane = $(".taskEditPane");
        var dailyPane = $(".dailyPlanPane")

        try {
            if (show) {
                taskEditPane.removeAttr("hidden");
                dailyPane.css("width", "70%");
            } else {
                taskEditPane.attr("hidden", true);
                dailyPane.css("width", "90%");
            }
        } catch (e) { console.log(e); }
    }

    function updateTask(Task) {
        index = $(Task).attr("data-index");
        taskToUpdate = JSONArray[index];
        taskToUpdate = setTaskObjectToUpdate(taskToUpdate, index);
        //taskToUpdate.PlannedDate = $.datepicker.formatDate('yy-m-dd', new Date(parseInt(taskToUpdate.PlannedDate.substr(6))))
        updateTaskToServer(taskToUpdate, "updateTask", index);
    }


    function setTaskObjectToUpdate(Task, index) {
        /*
        Get relevant task data from grid.
        */

        Task.Name = $("#taskName_" + index).val();
        Task.PlannedDate = $("#PlannedDate_" + index).val();
        Task.Reason = $("#Reason_" + index).val();

        Task.Leverage = $("#Leverage_" + index).val();
        Task.Priority = $("#Priority_" + index).val();
        Task.PriorityID = $("#PriorityID_" + index).val();
        var duration = $("#Duration_" + index).val();
        setTaskDurationFromUser(Task, duration);
        Task.DurationDisplay = $("#Duration_" + index).val();
        return Task;
    }
    function setTaskDurationFromUser(Task, duration) {
        if (duration.toUpperCase().indexOf("H") > 0) {
            Task.DurationMessure = "H";
            Task.Duration = duration.substring(0, duration.toUpperCase().indexOf("H"));
        } else if (duration.toUpperCase().indexOf("D") > 0) {
            Task.DurationMessure = "D";
            Task.Duration = duration.substring(0, duration.toUpperCase().indexOf("D"));
        } else if (duration.toUpperCase().indexOf("M") > 0) {
            Task.DurationMessure = "M";
            Task.Duration = duration.substring(0, duration.toUpperCase().indexOf("M"));
        } else {
            try {
                if (!isAlphaNumeric(duration)) {
                    alert("Not a valid number. Please enter a valid number.");
                    return;
                } else {
                    Task.Duration = parseInt(duration.trim());
                    Task.DurationMessure = "H";
                    $("#Duration_" + index).val(duration + "H");
                }
            } catch (e) {
                alert(e);
            }

        }
    }
    function isAlphaNumeric(text) {
        var pattern = /^[0-9 ]+$/;
        if (pattern.test(text))
            return true;
        return false;
    }
    function removeTask(Task) {
        index = $(Task).attr("data-index");
        taskToUpdate = JSONArray[index];
        updateTaskToServer(taskToUpdate, "RemoveTask", index);
    }


    function updateTaskToServer(taskObject, action, index) {
        $.ajax({
            url: taskURL + "?method=" + action,
            type: 'POST',
            async: false,
            contentType: 'application/json',
            data: JSON.stringify(taskObject),
            dataType: 'json',
            cache: false,
            success: function (data, textStatus, xhr) {
                console.log(textStatus);
                if (data < "0")
                    printErrorMessage(data);
                else
                    handleServerResponse(action, index, data);
                return true;

            },
            error: function (data, textStatus, errorThrown) {
                console.log(textStatus);
                return true;
            }
        });
        return true;
    }
    function printErrorMessage(output) {
        alert(output);
    }
    function handleServerResponse(action, index, data) {
        if (action == "updateTask") {
            try {
                var tempRow = $("#dailyTaskRow_" + index);
                updateRowData(tempRow, data, index);
                JSONArray[index] = updateJSONTask(JSONArray[index], data);
                setEditPane(JSONArray[index], index);
                printTaskStack(JSONArray[index]);

            } catch (e) {
                console.log(e);
            }

        } else if (action == "AddTask") {
            console.log("Index Passed in " + index);
            updateTasksList(data);
            console.log("Array Length - " + JSONArray.length);
            JSONArray[index].ID = data;
            console.log("Added Task ID - " + JSONArray[index].ID)
        } else if (action == "RemoveTask") {
            try {
                removeTaskFromGrid(index);
                JSONArray[index].ID = -1;
            } catch (err) {
                console.log(e);
            }
            console.log("RemoveTask Success....");
        } else {
            console.log("Unknown Action...");
        }
    }
      </script>
<div id="errorPane">
</div>
<div style="{
        width: 100%;
        float: left;
    }">
<div class="dailyPlanPane">
  <fieldset class="widgetWindow">
    <div class="widgetHeader">&nbsp;&nbsp;My Daily Plan for <span id="newlyPickedDate">@DateTime.Now.ToString("ddd, MMMM dd, yyyy")</span></div>
           
            <div class="fieldSelectorWidget">
                <a href="#" id="Today">Today </a>
                ,<a href="#" id="Tomorrow">Tomorrow </a>
                ,<a href="#" id="DayAfter">Day After </a>
                ,<a href="#" id="Daily">Daily </a>
                ,<a href="#" id="Weekly">Weekly </a>
                ,<a href="#" id="Monthly">Monthly </a>
               


            </div>
      

            <div class="fieldSelectorWidget">
                 @Html.TextBox("newTask","Add a Task",new { size = "50",id = "addtask"})
                 @Html.DropDownList("Shownext",projectTypes,new {id = "projectName"})
                 <input type="button" value="Add" id="Add">
            </div>
            <div class="datepicker1">@Html.Hidden("PickedDate","PickedDate",new {id="pickedDate"})</div>
            <div class="widgetTableDiv">
                <table class="widgetTable">
                    <thead id="dailyTaskTableHead">
                       <tr>
                         <th>My Result</th>
                         <!--th>My Reason</th>-->
                         <th>Est.</th>
                         <th>Due</th>
                         <!--th>Support</th>-->
                         <th>Imp</th> 
                         <th>Action</th>         
                       </tr>
                    </thead>
                    <tbody class="dailyTaskTableBody" id="dailyTaskTableBody">
                        <!-- readonly="readonly",-->
                        @{
                            int i = 0;
                        }

                        @foreach(var task in currentDayTasks){
                            <tr class="dailyTaskRow_@i" id="dailyTaskRow_@i">
                                <td>@Html.TextBox("taskName_"+i,task.Name,new { size = "40",@class="textArea",id="taskName_"+i,@onFocusOut="updateJSONAray(this,"+i+",'taskName')"})<!--/td>
                               <td>--> @Html.Hidden("Reason_"+i,@task.Reason,new { rows = "4",cols="30",@class="textArea",@onFocusOut="updateJSONAray(this,"+i+",'Reason')"})</td>
                                <td>@Html.TextBox("Duration_"+i,@task.DurationDisplay,new { size = "2",@class="textArea"})</td>
                                <td>@Html.TextBox("PlannedDate_"+i,@task.PlannedDate.ToString("MMM dd, yy"),new { size = "12",@class="textArea PlannedDate",id="PlannedDate_"+i,@readonly="true"})<!--/td>
                               <td>--> @Html.Hidden("Leverage_"+i,@task.Leverage,new { cols = "20",rows="1",@class="textArea",id="Leverage_"+i})</td>
                                <td>@Html.TextBox("Priority_"+i,@task.Priority,new { size = "2",@class="textArea",id="Priority_"+i})</td>
                                <td><a href="javascript:editTask('#taskEdit_@i')" id="taskEdit_@i" data-index="@i" ><img alt="Edit" src='/Icons/pencil.png' width="20px" height="20px"></a>|<a href="javascript:updateTask('#taskUpdate_@i')" id="taskUpdate_@i" data-index="@i" ><img alt="Update" src='/Icons/cnr_update.png' width="20px" height="20px"></a>|<a href="javascript:removeTask('#taskRemove_@i')" id="taskRemove_@i" data-index="@i"><img alt="Delete" src='/Icons/button_delete_green.png' width="20px" height="20px"></a></td>

                            </tr> 
                            i++;
                            <script>
                                console.log("Test");
                                createJSONArray(createJSONTask('@task.Name','@task.ID', '@task.ProjectID', '@task.projectName', 
                                new Date("@task.PlannedDate"), '@task.ScheduledTime', '@task.Duration', '@task.DurationMessure',
                                '@task.DurationDisplay', '@task.Leverage', '@task.Reason', '@task.Priority', '@task.priorityID'));
                                 
                                 function updateJSONAray(obj,id,name){
                                    console.log(id)
                                   console.log(JSON.stringify(JSONArray));
                                   JSONArray[id].Reason = $(obj).val();
                                }
                            </script>
                        }
                    </tbody>
                </table>
        </div>
      
      
       <div style="float: right; margin-right: 12px; margin-bottom: 3px;">
        <form action="DailyPlan" method="post">
             <a href="javascript:top.location='DailySchedule'" > Schedule</a>
             <a href="javascript:top.location='DailySchedule'" > Gratitude Hall </a>
        </form>
    </div>
</fieldset>
</div>
 <div class="taskEditPane" hidden="hidden">

            
             <fieldset class="widgetWindow">
                 <div class="widgetHeader">&nbsp;&nbsp;Edit Task</div>
                 
                 <div class="taskEditSpan">
                 @Html.Hidden("hidTaskID","",new {id="hidTaskId"})
                 <b><span id="taskName">Create Edit / Delete options to Task Creation</span></b><img alt="Edit" src='/Icons/pencil.png' width="20px" height="20px"></br></br>
                 <div style="width: 100%; padding-top: 2px;"> <div style="width:80px;float: left;">Reason : </div> <TEXTAREA rows="5" cols="20" style="float: left;border: 1px solid #cdcdcd" id="editReason"></TEXTAREA></div></br>
                 <div style="float:left;width: 100%;padding-top: 2px;"><div style="width:80px;float: left;">Project: </div> @Html.DropDownList("Shownext",projectTypes,new {id = "projectNames", style="float: left;border: 1px solid #cdcdcd;margin-left:0px;"})</div></br>
                 <div style="float:left;width: 100%; padding-top: 2px;"><div style="width:80px;float: left;">Due: </div><INPUT TYPE="text" SIZE="10" style="float: left;border: 1px solid #cdcdcd;" id="taskDue"></div></br>
                 <div style="float:left;width: 100%; padding-top: 2px;"><div style="width:80px;float: left;">Time Estimate: </div> <INPUT TYPE="text" SIZE="10" style="float: left;border: 1px solid #cdcdcd;" id="taskEstimates"></div></br>
                 <div style="width: 100%; padding-top: 2px;"> <div style="width:80px;float: left;">Supported By: </div> <TEXTAREA rows="5" cols="20" style="float: left;border: 1px solid #cdcdcd;" id="taskSupport"></TEXTAREA></div></br>
                 <div style="float:left;width: 100%; padding-top: 2px;"><div style="width:80px;float: left;">Priority: </div> <INPUT TYPE="text" SIZE="10" style="float: left;border: 1px solid #cdcdcd;" id="taskPriority"></div></br>
                 <div style="float:left;width: 100%; padding-top: 2px;"><div style="width:80px;float: left;">Scheduled Time : </div> <INPUT TYPE="text" SIZE="10" style="float: left;border: 1px solid #cdcdcd;" id="taskSchedule"></div></br>
                 <div style="float: right; margin-right: 5px;"><a href="javascript:updateFullTask()" >Update</a></div>
                 </div>
             </fieldset>   
     </div>
    <script>
        function setEditPane(taskEdit, index) {
            printTaskStack(taskEdit)
            $("#taskName").text(taskEdit.Name);
            $("#editReason").val(taskEdit.Reason);
            $("#projectNames").val(taskEdit.ProjectID);
            try {
                if (taskEdit.PlannedDate.indexOf("Date") > 0) {
                    console.log(taskEdit.PlannedDate.substr(6));
                    taskEdit.PlannedDate = new Date(parseInt(taskEdit.PlannedDate.substr(6)));
                    
                }
                $("#taskDue").val($.datepicker.formatDate('MM dd,yy', taskEdit.PlannedDate));
            } catch (e) { console.log(e); }
            $("#taskEstimates").val(taskEdit.DurationDisplay);

            $("#taskSupport").val(taskEdit.Leverage);
            $("#taskPriority").val(taskEdit.Priority);
            $("#taskSchedule").val(taskEdit.ScheduledTime);
            $("#hidTaskId").val(index);

        }

        function setTaskAttrsFromEditPane(taskEdit, index) {
            taskEdit.Name = $("#taskName").text();
            taskEdit.Reason = $("#editReason").val();
            taskEdit.ProjectID = $("#projectNames").val();
            taskEdit.PlannedDate = $("#taskDue").val();

            taskEdit.DurationDisplay = $("#taskEstimates").val();
            setTaskDurationFromUser(taskEdit, $("#taskEstimates").val());

            taskEdit.Leverage = $("#taskSupport").val();
            taskEdit.Priority = $("#taskPriority").val();
            taskEdit.ScheduledTime = $("#taskSchedule").val();

            console.log("Priority - - " + taskEdit.Priority)
        }

        $('#taskDue').datepicker({
            dateFormat: "M d,y"
        });

        function updateFullTask() {
            var index = $("#hidTaskId").val();
            console.log(index);
            console.log(JSONArray[index]);
            taskToUpdate = JSONArray[index];

            try { setTaskAttrsFromEditPane(taskToUpdate, index); } catch (e) { console.log(e); }
            updateTaskToServer(taskToUpdate, "updateTask", index);
        }

        function printTaskStack(Task) {


            console.log("Task Name ...." + Task.Name);
            console.log("Task Project ID ...." + Task.ProjectID);
            console.log("Task PlannedDate_ ...." + Task.PlannedDate);
            console.log("Task Reason_ ...." + Task.Reason);
            console.log("Task Duration ...." + Task.Duration);
            console.log("Task DurationDisplay ...." + Task.DurationDisplay);
            console.log("Task DurationMessure ...." + Task.DurationMessure);
            console.log("Task Leverage ...." + Task.Leverage);
            console.log("Task Priority ...." + Task.Priority);
        }
    </script>
</div>
  
